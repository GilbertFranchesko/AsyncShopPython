# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import basket_pb2 as basket__pb2


class BasketServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/basket.BasketService/Create',
                request_serializer=basket__pb2.CreateBasketRequest.SerializeToString,
                response_deserializer=basket__pb2.CreateBasketResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/basket.BasketService/List',
                request_serializer=basket__pb2.ListBasketRequest.SerializeToString,
                response_deserializer=basket__pb2.ListBasketResponse.FromString,
                )
        self.AddProduct = channel.unary_unary(
                '/basket.BasketService/AddProduct',
                request_serializer=basket__pb2.AddProductRequest.SerializeToString,
                response_deserializer=basket__pb2.AddProductResponse.FromString,
                )
        self.RemoveProduct = channel.unary_unary(
                '/basket.BasketService/RemoveProduct',
                request_serializer=basket__pb2.RemoveProductRequest.SerializeToString,
                response_deserializer=basket__pb2.RemoveProductResponse.FromString,
                )


class BasketServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BasketServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=basket__pb2.CreateBasketRequest.FromString,
                    response_serializer=basket__pb2.CreateBasketResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=basket__pb2.ListBasketRequest.FromString,
                    response_serializer=basket__pb2.ListBasketResponse.SerializeToString,
            ),
            'AddProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.AddProduct,
                    request_deserializer=basket__pb2.AddProductRequest.FromString,
                    response_serializer=basket__pb2.AddProductResponse.SerializeToString,
            ),
            'RemoveProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveProduct,
                    request_deserializer=basket__pb2.RemoveProductRequest.FromString,
                    response_serializer=basket__pb2.RemoveProductResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'basket.BasketService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BasketService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/basket.BasketService/Create',
            basket__pb2.CreateBasketRequest.SerializeToString,
            basket__pb2.CreateBasketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/basket.BasketService/List',
            basket__pb2.ListBasketRequest.SerializeToString,
            basket__pb2.ListBasketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/basket.BasketService/AddProduct',
            basket__pb2.AddProductRequest.SerializeToString,
            basket__pb2.AddProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/basket.BasketService/RemoveProduct',
            basket__pb2.RemoveProductRequest.SerializeToString,
            basket__pb2.RemoveProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
